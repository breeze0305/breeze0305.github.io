{"pages":[{"title":"","text":"Hi, 這是微風我是微風。 如你所見，我是一位在師範學校讀電機的剪輯師，簡直是buff上滿平常的樂趣就是剪片，跟看影片–Youtube &amp; Bilibili嚴重中毒如你有什麼問題，歡迎聯繫我的Discord與IG，我將毫不吝嗇的回答你的問題Line只用在工作上，已開啟陌生訊息阻擋，非必要不加好友 「原本要走向PV師,結果變成斜咖meme遊戲影片剪輯師」 委託項目請按我 聯絡方式 &amp;個人訊息 你所想到的所有聯絡方式都在旁邊了 Discord:微風#8410 關於本站：這是一個使用Hexo創建的，託管在GitHub上的個人Blog。在主題Anatole的基礎上做了大量修改和優化，製作成了主題Anatolo。大量模仿锦心大佬的作品，如果大家願意也可以去看看大佬的作品。","link":"/about/index.html"},{"title":"作品集","text":"Dead by daylight APEX","link":"/Artwork/index.html"},{"title":"Dead by daylight","text":"","link":"/artwork_second_page1/index.html"},{"title":"APEX","text":"","link":"/artwork_second_page2/index.html"},{"title":"日誌","text":".purple { color: #5900FF; } 2023/04/14 新增委託項目、更新about內容、增加一點點小彩蛋 2023/04/14 更新日誌新增、電腦配備更新、移除links介面","link":"/update/index.html"}],"posts":[{"title":"實況主們","text":"巨龍阿秉YT: https://www.youtube.com/channel/UCVleW5CQMvlZ--jrkHRvqwg巨龍阿秉Twitch:https://www.twitch.tv/blueguy861113 「女裝斜咖」 火爆蟲蟲YT: https://www.youtube.com/channel/UC6t3hvEa2uPI_0-V95jnGEA火爆蟲蟲Twitch:https://www.twitch.tv/152babe 「正妹一個」 紋紋YT: https://www.youtube.com/channel/UCMyxOWKfTBwsXaoav4gEwHA紋紋Twitch:https://www.twitch.tv/wen620 「原本以為是一個正妹實況主，結果還是斜咖一枚，為了滿足自己做了一個大奶的V皮」 已結束合作 阿萬YT:https://www.youtube.com/channel/UCda8AqSoaEG1bSLfnLI6Bqw 「原本以為是正經的實況主，結果還是斜咖一枚」 1234567我們摯愛的阿萬於西元2023年1月9日，悄悄的離開這個實況圈 我們痛徹心扉，就僅僅一眨眼的時間，天人永隔阿萬安祥的走完了一年多的實況人生旅程他彷彿在沉睡中做了一個美夢夢醒了，留下陪伴我們成長過程中的點點滴滴留下我們永恆的追思與感恩 黑皮YT:https://youtube.com/user/specialboil ｢我的第一個剪輯老闆，現在已經不知道跑去哪了｣(開玩笑的，他跑去經營一個 按摩工作室) 安醬YT:https://www.youtube.com/channel/UCIHbuwTjB9ItyR8Bfn5nl-A/videos 「一個玩GTA的女實況主」","link":"/2023/03/19/%E5%AF%A6%E6%B3%81%E4%B8%BB/"},{"title":"Hexo","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/03/19/Hexo/"},{"title":"大量的markdown語法","text":"This is intended as a quick reference and showcase. For more complete info, see John Gruber’s original spec and the Github-flavored Markdown info page. This cheatsheet is specifically Markdown Here’s version of Github-flavored Markdown. This differs slightly in styling and syntax from what Github uses, so what you see below might vary a little from what you get in a Markdown Here email, but it should be pretty close. GIF動圖指令表達式1&lt;center&gt;&lt;img src=&quot;/images/image0.gif&quot; width = &quot;&quot; height = &quot;&quot;&gt;&lt;/center&gt; Table of ContentsHeadersEmphasisListsLinksImagesCode and Syntax HighlightingBlockquotesInline HTMLHorizontal RuleLine Breaks ## Headers 1234567891011121314# H1## H2### H3#### H4##### H5###### H6Alternatively, for H1 and H2, an underline-ish style:Alt-H1======Alt-H2------ H1H2H3H4H5H6Alternatively, for H1 and H2, an underline-ish style: Alt-H1Alt-H2 ## Emphasis 12345Emphasis, aka italics, with *asterisks* or _underscores_.Strong emphasis, aka bold, with **asterisks** or __underscores__.Combined emphasis with **asterisks and _underscores_**. Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. ## Lists 1234567891011121. First ordered list item2. Another item * Unordered sub-list. 1. Actual numbers don't matter, just that it's a number 1. Ordered sub-list4. And another item. Some text that should be aligned with the above item.* Unordered list can use asterisks- Or minuses+ Or pluses First ordered list item Another item Unordered sub-list. Actual numbers don’t matter, just that it’s a number Ordered sub-list And another item. Some text that should be aligned with the above item. Unordered list can use asterisks Or minuses Or pluses ## Links There are two ways to create links. 12345678910111213[I'm an inline-style link](https://www.google.com)[I'm a reference-style link][Arbitrary case-insensitive reference text][You can use numbers for reference-style link definitions][1]Or leave it empty and use the [link text itself][]Some text to show that the reference links can follow later.[arbitrary case-insensitive reference text]: https://www.mozilla.org[1]: http://slashdot.org[link text itself]: http://www.reddit.com I’m an inline-style link I’m a reference-style link You can use numbers for reference-style link definitions Or leave it empty and use the link text itself Some text to show that the reference links can follow later. ## Images 123456789Here's our logo (hover to see the title text):Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 1&quot;)Reference-style: ![alt text][logo][logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 2&quot; Here’s our logo (hover to see the title text): Inline-style: Reference-style: ## Code and Syntax Highlighting Code blocks are part of the Markdown spec, but syntax highlighting isn’t. However, many renderers – like Github’s and Markdown Here – support syntax highlighting. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page. 1Inline `code` has `back-ticks around` it. Inline code has back-ticks around it. Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks – they’re easier and only they support syntax highlighting. 123```javascriptvar s = &quot;JavaScript syntax highlighting&quot;;alert(s); 12s = &quot;Python syntax highlighting&quot;print s 12No language indicated, so no syntax highlighting. But let's throw in a &lt;b&gt;tag&lt;/b&gt;. 1234```javascriptvar s = &quot;JavaScript syntax highlighting&quot;;alert(s); 12s = &quot;Python syntax highlighting&quot;print s 12No language indicated, so no syntax highlighting in Markdown Here (varies on Github). But let's throw in a &lt;b&gt;tag&lt;/b&gt;. (Github Wiki pages don’t seem to support syntax highlighting, so the above won’t be colourful (the strings are not red, for example). Try it out in a Markdown Here email or a Github Markdown README or Github Issue – you can preview a new Issue without submitting it.) Again, to see what languages are available for highlighting, and how to write those language names, see the highlight.js demo page. ## Blockquotes 123456&gt; Blockquotes are very handy in email to emulate reply text.&gt; This line is part of the same quote.Quote break.&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text.This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. ## Inline HTML You can also use raw HTML in your Markdown, and it’ll mostly work pretty well. Here are a couple of common examples: 12345678910111213141516171819202122232425262728&lt;dl&gt; &lt;dt&gt;Definition list&lt;/dt&gt; &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt; &lt;dt&gt;Markdown in HTML&lt;/dt&gt; &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;&lt;/dl&gt;&lt;table&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;Tables&lt;/th&gt; &lt;th&gt;Are&lt;/th&gt; &lt;th&gt;Cool&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Zebra&lt;/th&gt; &lt;td&gt;Stripes&lt;/td&gt; &lt;td&gt;Are&lt;/td&gt; &lt;td&gt;Pretty&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Here&lt;/th&gt; &lt;td&gt;Is&lt;/td&gt; &lt;td&gt;Another&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags. Tables Are Cool Zebra Stripes Are Pretty Here Is Another Row Github-flavored Markdown supports a special table syntax, but Markdown Here does not support it yet. There’s an issue for it. ## Horizontal Rule 12345678910111213Three or more...---Hyphens***Asterisks___Underscores Three or more… Hyphens Asterisks Underscores ## Line Breaks My basic recommendation for learning how line breaks work is to experiment and discover – hit &lt;Enter&gt; once, then hit it twice, see what happens. You’ll soon learn to get what you want. “Markdown Toggle” is your friend. Here are some things to try out: 1234567With only a single newline, this line andthis line will be a *single line*.But this one is separated by two newlines and so will be a *separate paragraph*.This line has two spaces at the end (hard for you to see, but trust me!). So this is a separate line in the *same paragraph*. With only a single newline, this line andthis line will be a single line. But this one is separated by two newlines and so will be a separate paragraph. This line has two spaces at the end (hard for you to see, but trust me!).So this is a separate line in the same paragraph.","link":"/2023/03/19/markdown/"},{"title":"Hello World","text":"你好，世界 這是一個由開源Hexo所架設的網站，謝謝各方開源人士的幫忙 Anatolo简介Anatolo是一個基於Hexo blog框架的主題，旨在為用戶提供簡潔、優美、易於定制的blog主題。 特性 簡潔美觀：清新簡潔的設計，專注於內容展示。 響應式設計：針對不同設備自動調整佈局，提供更好的閱讀體驗。 高度定制化：提供大量可配置的選項，可定制博客主題的各個方面。 支持多種代碼高亮風格：提供多種代碼高亮風格，讓代碼展示更美觀。 響應式音樂播放器：集成了響應式音樂播放器，支持多種音頻格式，讓你的博客更有趣。 使用安裝Clone: 1234git clone https://gitee.com/Lhcfl/hexo-theme-anatolo.git themes/Anatolo或者直接下載主題zip包解壓至主題目錄下，重命名為Anatolo 安裝依賴 123npm install hexo-renderer-pug --savenpm install hexo-renderer-stylus --save 配置複製_config.example.yml為_config.yml修改hexo根目錄下的 _config.yml ： theme: Anatolo","link":"/2023/03/19/Hello%20World/"},{"title":"Computer","text":"body { font-family: Arial, sans-serif; color: #333; background-color: #eee; margin: 0; padding: 0; } h1 { text-align: center; font-size: 36px; margin-top: 50px; } .container { margin: 0 auto; max-width: 800px; padding: 20px; background-color: #fff; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); /* 加上陰影效果 */ } h2 { font-size: 24px; margin-top: 40px; } th { background-color: #f2f2f2; } table { table-layout: fixed; width: 100%; border-collapse: collapse; } th, td { padding: 10px; border: 1px solid black; text-align: center; } th:first-child { width: 30%; } td:nth-child(2) { width: 70%; } 我的桌機 CPU 品牌 Intel 型號 i7-11700F 記憶體 品牌 美光普條 容量 32GB (8GBx4) 顯卡 品牌 EVGA 型號 3060 主機板 品牌 AORUS 型號 B560M PRO AX 電源 品牌 EVGA 型號 650w 儲存裝置 固態硬碟 PNY CS3140 2TB 固態硬碟 美光P2 512GB 機械硬碟 WD金標 1T企業碟 螢幕 型號 Philips 272M8(1080p 144Hz) 型號 便攜式螢幕(2K 60Hz) 麥克風 型號 圓剛 AM310 鍵盤 型號 MSI VIGOR GK50 Low Profile(矮青軸 104配列) 型號 達爾優 ek868(凱華矮紅軸 68配列) 型號 skyloong拾光龍白日夢-夢聖誕(佳達隆短紅軸 68配列) 滑鼠 型號 羅技 MX master3 耳機 型號 Sony WH-1000XM4 我的筆電 筆電型號 Lenovo Thinkbook 14+ 2023 CPU i5-13500H 記憶體 32GB 固態硬碟 512GB","link":"/2023/03/25/%E9%9B%BB%E8%85%A6%E9%85%8D%E7%BD%AE/"},{"title":"電機營","text":"文章內容…","link":"/2023/03/25/%E9%9B%BB%E6%A9%9F%E7%87%9F/"},{"title":"Zerojudge高中生解題系統","text":"zerojudge程式碼目錄 a054. 電話客服中心a015. 矩陣的翻轉a005. Eva 的回家作業a006. 一元二次方程式a010. 因數分解a040. 阿姆斯壯數b964. 第 1 題 成績指標b374. [福州19中]众数a263. 日期差幾天","link":"/2023/04/10/zerojudge/"},{"title":"ttttt","text":"","link":"/2023/04/10/test_hide/"},{"title":"a054. 電話客服中心","text":"很多銀行及公司設立了電話客服中心來服務他們的客戶。為了加速身分的查核，常常會要求打電話進來的客戶輸入他的身分證號碼。可是電話上只有數字鍵，要輸入身分證號碼的第一個字母有點麻煩，因此有的語音系統會要求來電者輸入後 9 碼，再根據後 9 碼來推算可能的英文字母。 很多人都知道，身分證號碼的最後一碼是「檢查碼」，它是用前 9 碼所推算出來的，其推算的規則如下： 1.先依照下表將英文字母轉換為 2 位數字，再加上第 2 到第 9 位的 8 位數字一共有 10 位數字。 台北市 A 10 彰化縣 N 22 台中市 B 11 新竹市 O 35 基隆市 C 12 雲林縣 P 23 台南市 D 13 嘉義縣 Q 24 高雄市 E 14 台南縣 R 25 台北縣 F 15 高雄縣 S 26 宜蘭縣 G 16 屏東縣 T 27 桃園縣 H 17 花蓮縣 U 28 嘉義市 I 34 台東縣 V 29 新竹縣 J 18 金門縣 W 32 苗栗縣 K 19 澎湖縣 X 30 台中縣 L 20 陽明山 Y 31 南投縣 M 21 連江縣 Z 33 2.由左至右，第一位乘 1，第二位乘 9，第三位乘 8，第四位乘 7...，以此類推，最後一位乘 1。 求各位相對數字乘積的總和 s。 3.求 s 的個位數 m。(檢查碼只有一位數，因此若 c = 10 時，則檢查碼為 0。) 檢查碼 c = 10 - m 。 假設某人的身份證號碼前 9 碼為 F13024567，那麼他的最後一位檢查碼的計算過程如下： F 1 3 0 2 4 5 6 7 1 5 1 3 0 2 4 5 6 7 ×1 ×9 ×8 ×7 ×6 ×5 ×4 ×3 ×2 ×1 1 + 45 + 8 + 21 + 0 + 10 + 16 + 15 + 12 + 7 = 135 檢查碼 = 10 - (135 % 10) = 5 根據上面的規則，A12345678、M12345678 和 W12345678 這三個號碼的檢查碼都是 9。因此，如果在電話上所輸入的後 9 碼是 123456789 時，它的第一位英文字母可能是 A，也可能是 M 或 W。 12345678910111213141516171819202122232425262728293031323334# 每個行政區域的編號對應的數字，第一個元素代表 A 區域locate_list=[1, 10, 19, 28, 37, 46, 55, 64, 39, 73, 82, 2, 11, 20, 48, 29, 38, 47, 56, 65, 74, 83, 21, 3, 12, 30]# 每個行政區域的英文縮寫，第一個元素代表 A 區域locate_eng=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']# 存放符合的行政區域編號所對應的索引ans=[]# 計數符合的行政區域數量count=0# 把輸入存放至一個列表中id=list(input())# 計算身份證字號的後九碼,第九碼不計算sum_num=0for i in range(0,9,1): sum_num=sum_num+int(id[i])*(8-i)# 計算測試碼test=10-int(id[8])# 測試碼+餘數碼=檢查碼# 在所有可能的行政區域編號中，搜尋符合的行政區域編號for i in range(0,26,1): if (sum_num+locate_list[i])%10 == test%10: ans.append(i) count+=1# 印出所有符合的行政區域編號所對應的英文字母for i in range (0,count,1): print(locate_eng[ans[i]],end='') a054. 電話客服中心","link":"/2023/04/10/a054_hide/"},{"title":"a015. 矩陣的翻轉","text":"已知一(m x n)矩陣A，我們常常需要用到另一個將A中之行與列調換的矩陣。這個動作叫做矩陣的翻轉。舉例來說，若 A = [ 3 1 2 ] [ 8 5 4 ]則 AT = [ 3 8 ] [ 1 5 ] [ 2 4 ] 現在 請您針對所讀取到的矩陣進行翻轉。 1234567891011121314151617181920212223242526272829303132333435363738# 使用while迴圈，持續執行矩陣轉置過程，直到遇到例外（Exception）才終止while 1: try: # 輸入矩陣的行和列數 row, col = map(int, input().split()) # 初始化一個空列表，用於存儲矩陣 putin = [] # 根據行數讀取矩陣 for i in range(0, row, 1): # 讀取一行，並將其映射為整數列表 temp = list(map(int, input().split())) # 將該行添加到矩陣中 putin.append(temp) # 初始化一個新的空矩陣，用於存儲轉置後的矩陣 output = [] for i in range(0, col, 1): output.append([0] * row) # 進行矩陣轉置 for i in range(0, row, 1): for j in range(0, col, 1): # 將原矩陣的行列元素對調 output[j][i] = putin[i][j] # 輸出轉置後的矩陣 for i in range(0, col, 1): # 使用 * 來輸出列表中的每個元素，並用空格分隔 print(*output[i]) # 當遇到例外時，跳出迴圈 except: break a015. 矩陣的翻轉","link":"/2023/04/10/a015_hide/"},{"title":"a005. Eva 的回家作業","text":"Eva的家庭作業裏有很多數列填空練習。填空練習的要求是：已知數列的前四項，填出第五項。因為已經知道這些數列只可能是等差或等比數列，她決定寫一個程式來完成這些練習。 輸入說明第一行是數列的數目t（0 &lt;= t &lt;= 20）。 以下每行均包含四個整數，表示數列的前四項。 約定數列的前五項均為不大於105的自然數，等比數列的比值也是自然數。 輸出說明對輸入的每個數列，輸出它的前五項。 1234567891011121314151617181920212223242526# 讀取輸入的整數number = int(input())# 進行number次循環for i in range(number): # 讀取一行整數並將其分割為列表 the_list = list(map(int,input().split())) # 如果最後三個數字形成等差數列 if the_list[3] - the_list[2] == the_list[2] - the_list[1]: # 將下一個數字添加到列表中 the_list.append(the_list[3] * 2 - the_list[2]) # 將列表中的所有數字作為字符串輸出，使用空格作為分隔符 print(*the_list, sep=' ') # 如果最後三個數字不形成等差數列 else: # 將下一個數字添加到列表中 the_list.append(the_list[3] * the_list[3] // the_list[2]) # 將列表中的所有數字作為字符串輸出，使用空格作為分隔符 print(*the_list, sep=' ') a005. Eva 的回家作業","link":"/2023/04/12/a005_hide/"},{"title":"a006. 一元二次方程式","text":"求一元二次方程式 ax2+bx+c=0 的根 輸入說明每組輸入共一行，內含三個整數 a, b, c 以空白隔開。 輸出說明Two different roots x1=?? , x2=?? Two same roots x=?? No real root PS: 答案均為整數，若有兩個根則大者在前 1234567891011121314151617181920import math # 引入math模組# 讀入三個整數 a, b, c，使用 map() 函式將輸入轉換成整數a,b,c=map(int,input().split())# 計算判斷式d_check的值d_check=b*b-4*a*c# 判斷d_check的值，並輸出結果if d_check &lt; 0 : # 判斷d_check是否小於0，若是則無實數解 print(&quot;No real root&quot;)elif d_check == 0 : # 判斷d_check是否等於0，若是則有相同的兩個解 print(&quot;Two same roots x=&quot; + str(-b//(2*a))) # 計算出相同解的值，並輸出結果else : # 若d_check大於0，則有兩個不同的實數解 d_check=int(math.sqrt(d_check)) # 計算出根號下的值(默認為float)，並轉換成整數int print(&quot;Two different roots x1=&quot;+str((-b+d_check)//(2*a))+&quot; , x2=&quot;+str((-b-d_check)//(2*a))+&quot;&quot;)# ans_1=(-b+math.sqrt(b*b-4*a*c))//(2*a)# ans_2=(-b-math.sqrt(b*b-4*a*c))//(2*a) a006. 一元二次方程式","link":"/2023/04/12/a006_hide/"},{"title":"a010. 因數分解","text":"各位在國小時都學過因數分解，都瞭解怎麼樣用紙筆計算出結果，現在由你來敎電腦做因數分解。 因數分解就是把一個數字，切分為數個質數的乘積，如 12=2^2 * 3 其中, 次方的符號以 ^ 來表示 輸入說明輸入共一行。每行包含一個整數，符合大於1且小於等於100000000 輸出說明針對每一行輸入整數輸出一個因數分解字串 此題有些微複雜,故將重點提出於def analysis(num)函式,可以直接將函式內容貼在主程式else下方即可此題需要判斷的兩個點(1) 1次方不用顯示次方,大於一次方需要顯示次方(2) 每一個位數需要加上「*」,最後一個位數不用加上「*」 1234567891011121314151617181920212223242526272829# 定義一個名為 analysis 的函數，用於對輸入的整數進行因式分解def analysis(num): i=2 # 從 2 開始作為潛在的因數 count=0 # 計算因數出現的次數 # 無限循環，直到 num 被完全分解,是否結束由if判斷 while 1: if num % i == 0: # 如果 i 是因數 count+=1 # 增加因數的次數 num=num//i # 更新 num 值 else: # 不是因數,準備輸出or i往後移動 if count==1: # 如果因數出現一次 print(i,end='') # 直接輸出因數 elif count &gt; 1: # 如果因數出現多次 print(str(i)+'^'+str(count),end='') # 輸出因數和次數 if num==1: # 如果 num 已經被完全分解 break # 跳出循環 elif count &gt;= 1: # 如果因數次數大於等於 1 print(' * ',end='') # 輸出乘法符號 count=0 # 重置因數次數 i+=1 # 嘗試下一個潛在因數# 讀取使用者輸入的整數num=int(input())if num == 1: # 如果輸入為 1 print(&quot;1&quot;) # 直接輸出 1else : analysis(num) # 調用 analysis 函數進行因式分解 a010. 因數分解","link":"/2023/04/12/a010_hide/"},{"title":"a040. 阿姆斯壯數","text":"所謂 Armstrong number 指的是一個 n 位數的整數，它的所有位數的 n 次方和恰好等於自己。 如；1634 = 1^4+6^4+3^4+4^ 請依題目需求在一定範圍內找出該範圍內的所有 armstrong numbers. 輸入說明輸入共一行包含兩個數字n, m(n&lt;m, n&gt;0, m&lt;=1000000)，代表所有尋找 armstrong number 的範圍 輸出說明將所有範圍內的 armstrong number 依序由小到大輸出，如果沒有找到請輸出 none. 1234567891011121314151617181920212223242526272829# 讀取輸入範圍first, end = map(int, input().split())# 檢查是否有輸出no_output_check = 0# 在範圍內進行迭代for i in range(first, end + 1, 1): temp = 0 i_temp = i # 獲取數字長度 length = len(str(i)) # 迭代數字的每一位 for j in range(0, length, 1): # 將每一位數的length次方加到temp temp = temp + (i_temp % 10) ** length # 將i_temp除以10，往下一位數 i_temp = i_temp // 10 # 檢查temp是否等於i，如果是，則輸出 if temp == i: print(i, end=' ') no_output_check += 1# 如果沒有輸出，則顯示&quot;none&quot;if no_output_check == 0: print('none') a040. 阿姆斯壯數","link":"/2023/04/12/a040_hide/"},{"title":"a263. 日期差幾天","text":"給你兩個日期，問這兩個日期相差幾天。 輸入說明輸入有多筆測資，每筆測資有兩行，每行有三個整數依序是年、月、日。輸入以 EOF 作為結束，題目保證不會有不符合的測資出現。 輸出說明輸出兩個日期差幾天。 上面的程式碼是此題的標準解法,需要用到datatime函式庫,不然運行會TLE(超時)下面的程式碼為邏輯程式碼,一樣是正確的版本,本地可執行,驗證TLEpython for迴圈容易占用過多時間 1234567891011121314151617181920212223242526from datetime import datewhile True: try: # 讀取輸入日期 year1, month1, day1 = map(int, input().split()) year2, month2, day2 = map(int, input().split()) # 轉換成 date 物件 date1 = date(year1, month1, day1) date2 = date(year2, month2, day2) # 計算日期差 delta = (date2 - date1) # 輸出結果 if int(delta.days)&lt;0: print(-delta.days) else: print(delta.days) except: # 輸入結束 break 12345678910111213141516171819202122232425262728293031323334353637383940def leap_check(year): if (year%400==0) or (year%4==0 and year%100!=0): return 1 else: return 0def leap_year_sum_day(year): #回傳年天數 if leap_check(year): return 366 else: return 365def leap_month_sum_day(month,year): #回傳該月份累積天數 leap_year_day_add=[0,31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366] not_leap_year_day_add=[0,31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365] if leap_check(year): return leap_year_day_add[month-1] else: return not_leap_year_day_add[month-1]while True: try: head=list(map(int,input().split())) tail=list(map(int,input().split())) if head[0]&gt;tail[0] or (head[0]==tail[0] and head[1]&gt;tail[1]) or (head[0]==tail[0] and head[1]==tail[1] and head[2]&gt;tail[2]): temp=list(tail) tail=list(head) head=list(temp) sum_day=0 for i in range(head[0]+1,tail[0],1): sum_day=sum_day+leap_year_sum_day(i) if head[0]!=tail[0]: sum_day=sum_day+leap_month_sum_day(tail[1],tail[0])+tail[2]+leap_year_sum_day(head[0])-leap_month_sum_day(head[1],head[0])-head[2]#計算tail年累積天數+head年剩餘天數 else: sum_day=sum_day+leap_month_sum_day(tail[1],tail[0])+tail[2]-leap_month_sum_day(head[1],head[0])-head[2] print(leap_month_sum_day(tail[1],tail[0]),tail[2],leap_month_sum_day(head[1],head[0]),head[2]) print(sum_day) except: break a263. 日期差幾天","link":"/2023/04/12/a263_hide/"},{"title":"b374. [福州19中]众数","text":"給定N個無序的1到30000之間的正整數，其中1≤N≤10000。同一個正整數可能會出現多次，出現次數最多的整數稱為众數。請求出它的众數及它出現的次數。 輸入說明輸入文件第一行為正整數的個數N，第二行開始是N個正整數，每兩個正整數之間用一個空格隔開。 輸出說明輸出文件有若干行（因為众數可能不唯一），每行兩個數，第1個是众數，第2個是众數出現的次數，兩個數之間用一個空格隔開。 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 讀取數量輸入num = int(input())# 讀取一個數字序列並轉換為整數列表the_list = list(map(int, input().split()))# 對列表進行排序the_list.sort()# 初始化答案列表和計數列表ans = []count = []# 將列表中的第一個元素加入答案列表和計數列表ans.append(the_list[0])count.append(0)j = 0# 計數列表的第一個元素增加 1count[j] += 1max_num = 0# 遍歷排序後的列表for i in range(1, num, 1): # 如果當前元素與前一個元素相同 if the_list[i] == the_list[i - 1]: # 增加相應索引的計數值 count[j] += 1 else: # 更新最大出現次數 if max_num &lt; count[j]: max_num = count[j] # 將當前元素添加到答案列表中 ans.append(the_list[i]) # 更新索引值 j += 1 # 初始化新元素的計數值 count.append(0) # 新元素的計數值加 1 count[j] += 1# 遍歷計數列表for i in range(0, j + 1, 1): # 如果當前計數值等於最大計數值 if count[i] == max_num: # 輸出答案列表中對應的元素和計數值 print(ans[i], count[i]) b374. [福州19中]众数","link":"/2023/04/12/b374_hide/"},{"title":"b964. 第 1 題 成績指標","text":"一次考試中，於所有及格學生中獲取最低分數者最為幸運，反之，於所有不及格同學中，獲取最高分數者，可以說是最為不幸，而此二種分數，可以視為成績指標。 請你設計一支程式，讀入全班成績(人數不固定)，請對所有分數進行排序，並分別找出不及格中最高分數，以及及格中最低分數。 當找不到最低及格分數，表示對於本次考試而言，這是一個不幸之班級，此時請你印出「worst case」；反之，當找不到最高不及格分數時，請你印出「best case」。 ( 註：假設及格分數為 60 )。 輸入說明第一行輸入學生人數，第二行為各學生分數(0100 間)，分數與分數之間以一個空白間格。每一筆測資的學生人數為 120 的整數。 輸出說明每筆測資輸出三行。 第一行由小而大印出所有成績，兩數字之間以一個空白間格，最後一個數字後無空白；第二行印出最高不及格分數，如果全數及格時，於此行印出 best case ；第三行印出最低及格分數，如果全數不及格時，於此行印出 worst case 。 12345678910111213141516171819202122232425262728293031# 輸入學生數量student = int(input())# 輸入各學生的成績，並將它們轉換為整數列表grade_list = list(map(int, input().split()))# 對成績列表進行排序grade_list.sort()# 將排序後的成績列表輸出print(*grade_list)# 檢查列表中最低分數是否大於60分if grade_list[0] &gt; 60: # 如果最低分數大於60分，輸出&quot;best case&quot;和最低分數 print(&quot;best case&quot;) print(grade_list[0])# 檢查列表中最高分數是否小於60分elif grade_list[student - 1] &lt; 60: # 如果最高分數小於60分，輸出最高分數和&quot;worst case&quot; print(grade_list[student - 1]) print(&quot;worst case&quot;)else: i = 0 # 尋找小於60中最高的數字 while grade_list[i] &lt; 60: # 將當前成績賦值給變數temp temp = grade_list[i] i += 1 # 輸出最後一個小於60分的成績和下一個成績grade_list[i] print(temp) print(grade_list[i]) b964. 第 1 題 成績指標","link":"/2023/04/12/b964_hide/"},{"title":"委託項目","text":"簡易封面 照片畫值補強 影片畫值補強 影片補幀 AI繪圖 影片剪輯 簡易封面封面（Twitter、Facebook、YouTube），請提供素材，我會幫您做簡易的編排。委託一小時內完成，可以邊做您邊看（用 Discord 直播分享，哪裡想修改馬上講）。最終成品最多修改兩次，避免一來一回浪費彼此的時間。如果您會用 Photoshop，就不要來委託我，我只接懶得做跟沒時間做的。 價格:一張圖200元(1920 x 1080 或 1080 x 1080) 作品觀看 照片畫值補強請您提供照片（動漫圖、人物圖、風景圖、遊戲圖），我可以幫您增強畫值（AI 銳化）。可以提供 4 版不同的增強效果做選擇。參數內容由我來優化，總共調參兩次，最多可以出 8 張圖給您。 價格:一張圖10元 影片畫值補強提供影片（動漫、遊戲影片），幫您從 1080P 補到 4K。過程使用雲端硬碟作為傳輸，2 天候刪除雲端檔案，不保留。如影片過於模糊，造成效果不好請自行承擔。可提供 5 秒試補。 價格:1分鐘50元，未滿1分鐘以1分鐘計算。影片畫值補強 + 補幀，總價格打 7 折。 影片補幀提供影片補幀，不做任何調整。如動漫請自行抽幀，再提供給我。 價格:1分鐘補30幀25元、60幀40元例:10分鐘60幀影片-&gt;120幀(400元)影片畫值補強 + 補幀，總價格打 7 折。 AI繪圖可由我決定出最佳的 model 做運算，也可以由 CIVIAI 做選擇。算出的照片禁止作營利使用，所有版權問題皆與我無關。可畫 NSFW 圖，大量委託可議價。 價格:20次迭代+540x540 1張10元迭代翻倍:+5/per畫質1080x1080:+5/per 影片剪輯目前只接認識的，由於課業繁重，沒什麼時間剪片，真的想委託再私訊我Discord Discord:微風#8410","link":"/2023/04/14/%E5%A7%94%E8%A8%97/"},{"title":"簡易封面","text":".imgur-image { max-width: 30%; height: auto; }","link":"/2023/04/14/%E5%A7%94%E8%A8%97_%E7%B0%A1%E6%98%93%E5%B0%81%E9%9D%A2_hide/"}],"tags":[{"name":"實況主","slug":"實況主","link":"/tags/%E5%AF%A6%E6%B3%81%E4%B8%BB/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"遊戲","slug":"遊戲","link":"/tags/%E9%81%8A%E6%88%B2/"},{"name":"實況","slug":"實況","link":"/tags/%E5%AF%A6%E6%B3%81/"},{"name":"twitch","slug":"twitch","link":"/tags/twitch/"},{"name":"youtube","slug":"youtube","link":"/tags/youtube/"},{"name":"電腦","slug":"電腦","link":"/tags/%E9%9B%BB%E8%85%A6/"},{"name":"零件","slug":"零件","link":"/tags/%E9%9B%B6%E4%BB%B6/"},{"name":"intel","slug":"intel","link":"/tags/intel/"},{"name":"evga","slug":"evga","link":"/tags/evga/"},{"name":"基礎配置","slug":"基礎配置","link":"/tags/%E5%9F%BA%E7%A4%8E%E9%85%8D%E7%BD%AE/"},{"name":"剪輯","slug":"剪輯","link":"/tags/%E5%89%AA%E8%BC%AF/"},{"name":"code","slug":"code","link":"/tags/code/"},{"name":"封面","slug":"封面","link":"/tags/%E5%B0%81%E9%9D%A2/"},{"name":"AI","slug":"AI","link":"/tags/AI/"}],"categories":[{"name":"遊戲","slug":"遊戲","link":"/categories/%E9%81%8A%E6%88%B2/"},{"name":"網頁","slug":"網頁","link":"/categories/%E7%B6%B2%E9%A0%81/"},{"name":"電腦","slug":"電腦","link":"/categories/%E9%9B%BB%E8%85%A6/"},{"name":"zerojudge","slug":"zerojudge","link":"/categories/zerojudge/"},{"name":"private","slug":"private","link":"/categories/private/"},{"name":"委託","slug":"委託","link":"/categories/%E5%A7%94%E8%A8%97/"}]}